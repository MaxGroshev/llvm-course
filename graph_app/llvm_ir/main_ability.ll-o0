; ModuleID = '../app/abilities/main_ability.c'
source_filename = "../app/abilities/main_ability.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "arm64-apple-macosx15.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @getBarrierCenter() #0 {
  %1 = call i32 @simRand()
  %2 = srem i32 %1, 246
  ret i32 %2
}

declare i32 @simRand(...) #1

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @app() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [256 x [512 x i32]], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 36, ptr %1, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %2, i8 0, i64 524288, i1 false)
  %11 = call i32 @getBarrierCenter()
  store i32 %11, ptr %3, align 4
  store i32 447, ptr %4, align 4
  %12 = load i32, ptr %3, align 4
  store i32 %12, ptr %5, align 4
  %13 = load i32, ptr %5, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %14
  %16 = getelementptr inbounds [512 x i32], ptr %15, i64 0, i64 255
  store i32 16763144, ptr %16, align 4
  store i32 0, ptr %6, align 4
  br label %17

17:                                               ; preds = %124, %0
  store i32 0, ptr %7, align 4
  br label %18

18:                                               ; preds = %63, %17
  %19 = load i32, ptr %7, align 4
  %20 = icmp slt i32 %19, 256
  br i1 %20, label %21, label %66

21:                                               ; preds = %18
  store i32 1, ptr %8, align 4
  br label %22

22:                                               ; preds = %59, %21
  %23 = load i32, ptr %8, align 4
  %24 = icmp slt i32 %23, 511
  br i1 %24, label %25, label %62

25:                                               ; preds = %22
  %26 = load i32, ptr %8, align 4
  %27 = sub nsw i32 %26, 1
  %28 = load i32, ptr %7, align 4
  %29 = load i32, ptr %7, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %30
  %32 = load i32, ptr %8, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [512 x i32], ptr %31, i64 0, i64 %33
  %35 = load i32, ptr %34, align 4
  call void @simPutPixel(i32 noundef %27, i32 noundef %28, i32 noundef %35)
  %36 = load i32, ptr %4, align 4
  %37 = load i32, ptr %8, align 4
  %38 = icmp ne i32 %36, %37
  br i1 %38, label %43, label %39

39:                                               ; preds = %25
  %40 = load i32, ptr %5, align 4
  %41 = load i32, ptr %7, align 4
  %42 = icmp ne i32 %40, %41
  br i1 %42, label %43, label %58

43:                                               ; preds = %39, %25
  %44 = load i32, ptr %7, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %45
  %47 = load i32, ptr %8, align 4
  %48 = add nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [512 x i32], ptr %46, i64 0, i64 %49
  %51 = load i32, ptr %50, align 4
  %52 = load i32, ptr %7, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %53
  %55 = load i32, ptr %8, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [512 x i32], ptr %54, i64 0, i64 %56
  store i32 %51, ptr %57, align 4
  br label %58

58:                                               ; preds = %43, %39
  br label %59

59:                                               ; preds = %58
  %60 = load i32, ptr %8, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, ptr %8, align 4
  br label %22, !llvm.loop !6

62:                                               ; preds = %22
  br label %63

63:                                               ; preds = %62
  %64 = load i32, ptr %7, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, ptr %7, align 4
  br label %18, !llvm.loop !8

66:                                               ; preds = %18
  call void @simFlush()
  %67 = load i32, ptr %6, align 4
  %68 = srem i32 %67, 128
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %91

70:                                               ; preds = %66
  %71 = call i32 @getBarrierCenter()
  store i32 %71, ptr %3, align 4
  store i32 0, ptr %9, align 4
  br label %72

72:                                               ; preds = %87, %70
  %73 = load i32, ptr %9, align 4
  %74 = icmp slt i32 %73, 256
  br i1 %74, label %75, label %90

75:                                               ; preds = %72
  %76 = load i32, ptr %3, align 4
  %77 = load i32, ptr %9, align 4
  %78 = sub nsw i32 %76, %77
  %79 = call i32 @simAbs(i32 noundef %78)
  %80 = icmp sge i32 %79, 36
  br i1 %80, label %81, label %86

81:                                               ; preds = %75
  %82 = load i32, ptr %9, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %83
  %85 = getelementptr inbounds [512 x i32], ptr %84, i64 0, i64 510
  store i32 7522568, ptr %85, align 4
  br label %86

86:                                               ; preds = %81, %75
  br label %87

87:                                               ; preds = %86
  %88 = load i32, ptr %9, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, ptr %9, align 4
  br label %72, !llvm.loop !9

90:                                               ; preds = %72
  br label %91

91:                                               ; preds = %90, %66
  %92 = load i32, ptr %6, align 4
  %93 = srem i32 %92, 128
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %123

95:                                               ; preds = %91
  %96 = load i32, ptr %5, align 4
  %97 = load i32, ptr %3, align 4
  %98 = call i32 @simMin(i32 noundef %96, i32 noundef %97)
  store i32 %98, ptr %10, align 4
  br label %99

99:                                               ; preds = %112, %95
  %100 = load i32, ptr %10, align 4
  %101 = load i32, ptr %5, align 4
  %102 = load i32, ptr %3, align 4
  %103 = call i32 @simMax(i32 noundef %101, i32 noundef %102)
  %104 = icmp slt i32 %100, %103
  br i1 %104, label %105, label %115

105:                                              ; preds = %99
  %106 = load i32, ptr %10, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %107
  %109 = load i32, ptr %4, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [512 x i32], ptr %108, i64 0, i64 %110
  store i32 16763144, ptr %111, align 4
  br label %112

112:                                              ; preds = %105
  %113 = load i32, ptr %10, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, ptr %10, align 4
  br label %99, !llvm.loop !10

115:                                              ; preds = %99
  %116 = load i32, ptr %3, align 4
  store i32 %116, ptr %5, align 4
  %117 = load i32, ptr %5, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [256 x [512 x i32]], ptr %2, i64 0, i64 %118
  %120 = load i32, ptr %4, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [512 x i32], ptr %119, i64 0, i64 %121
  store i32 16763144, ptr %122, align 4
  br label %123

123:                                              ; preds = %115, %91
  br label %124

124:                                              ; preds = %123
  %125 = load i32, ptr %6, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, ptr %6, align 4
  br label %17
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare void @simPutPixel(i32 noundef, i32 noundef, i32 noundef) #1

declare void @simFlush(...) #1

declare i32 @simAbs(i32 noundef) #1

declare i32 @simMin(i32 noundef, i32 noundef) #1

declare i32 @simMax(i32 noundef, i32 noundef) #1

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 15, i32 5]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{!"Apple clang version 17.0.0 (clang-1700.0.13.5)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
