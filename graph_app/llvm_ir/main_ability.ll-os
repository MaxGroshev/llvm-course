; ModuleID = '../app/abilities/main_ability.c'
source_filename = "../app/abilities/main_ability.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "arm64-apple-macosx15.0.0"

; Function Attrs: nounwind optsize ssp uwtable(sync)
define range(i32 -245, 246) i32 @getBarrierCenter() local_unnamed_addr #0 {
  %1 = tail call i32 @simRand() #5
  %2 = srem i32 %1, 246
  ret i32 %2
}

; Function Attrs: optsize
declare i32 @simRand(...) local_unnamed_addr #1

; Function Attrs: noreturn nounwind optsize ssp uwtable(sync)
define noundef i32 @app() local_unnamed_addr #2 {
  %1 = alloca [256 x [512 x i32]], align 4
  call void @llvm.lifetime.start.p0(i64 524288, ptr nonnull %1) #6
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(524288) %1, i8 0, i64 524288, i1 false)
  %2 = tail call i32 @simRand() #5
  %3 = srem i32 %2, 246
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %4, i64 255
  store i32 16763144, ptr %5, align 4, !tbaa !6
  br label %6

6:                                                ; preds = %65, %0
  %7 = phi i32 [ %3, %0 ], [ %66, %65 ]
  %8 = phi i32 [ 0, %0 ], [ %67, %65 ]
  %9 = zext i32 %7 to i64
  br label %10

10:                                               ; preds = %6, %17
  %11 = phi i64 [ 0, %6 ], [ %18, %17 ]
  %12 = icmp eq i64 %11, %9
  %13 = trunc nuw nsw i64 %11 to i32
  br label %20

14:                                               ; preds = %17
  tail call void @simFlush() #5
  %15 = and i32 %8, 127
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %35, label %65

17:                                               ; preds = %32
  %18 = add nuw nsw i64 %11, 1
  %19 = icmp eq i64 %18, 256
  br i1 %19, label %14, label %10, !llvm.loop !10

20:                                               ; preds = %10, %32
  %21 = phi i64 [ 1, %10 ], [ %33, %32 ]
  %22 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 %21
  %23 = load i32, ptr %22, align 4, !tbaa !6
  %24 = trunc i64 %21 to i32
  %25 = add i32 %24, -1
  tail call void @simPutPixel(i32 noundef %25, i32 noundef %13, i32 noundef %23) #5
  %26 = icmp eq i64 %21, 447
  %27 = select i1 %26, i1 %12, i1 false
  br i1 %27, label %32, label %28

28:                                               ; preds = %20
  %29 = add nuw nsw i64 %21, 1
  %30 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !6
  store i32 %31, ptr %22, align 4, !tbaa !6
  br label %32

32:                                               ; preds = %20, %28
  %33 = phi i64 [ %29, %28 ], [ 448, %20 ]
  %34 = icmp eq i64 %33, 511
  br i1 %34, label %17, label %20, !llvm.loop !12

35:                                               ; preds = %14
  %36 = tail call i32 @simRand() #5
  %37 = srem i32 %36, 246
  %38 = sext i32 %37 to i64
  br label %39

39:                                               ; preds = %35, %47
  %40 = phi i64 [ 0, %35 ], [ %48, %47 ]
  %41 = trunc i64 %40 to i32
  %42 = sub i32 %37, %41
  %43 = tail call i32 @simAbs(i32 noundef %42) #5
  %44 = icmp sgt i32 %43, 35
  br i1 %44, label %45, label %47

45:                                               ; preds = %39
  %46 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %40, i64 510
  store i32 7522568, ptr %46, align 4, !tbaa !6
  br label %47

47:                                               ; preds = %39, %45
  %48 = add nuw nsw i64 %40, 1
  %49 = icmp eq i64 %48, 256
  br i1 %49, label %50, label %39, !llvm.loop !13

50:                                               ; preds = %47
  %51 = tail call i32 @simMin(i32 noundef %7, i32 noundef %37) #5
  %52 = tail call i32 @simMax(i32 noundef %7, i32 noundef %37) #5
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %50
  %55 = sext i32 %51 to i64
  br label %58

56:                                               ; preds = %58, %50
  %57 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %38, i64 447
  store i32 16763144, ptr %57, align 4, !tbaa !6
  br label %65

58:                                               ; preds = %54, %58
  %59 = phi i64 [ %55, %54 ], [ %61, %58 ]
  %60 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %59, i64 447
  store i32 16763144, ptr %60, align 4, !tbaa !6
  %61 = add nsw i64 %59, 1
  %62 = tail call i32 @simMax(i32 noundef %7, i32 noundef %37) #5
  %63 = sext i32 %62 to i64
  %64 = icmp slt i64 %61, %63
  br i1 %64, label %58, label %56, !llvm.loop !14

65:                                               ; preds = %14, %56
  %66 = phi i32 [ %37, %56 ], [ %7, %14 ]
  %67 = add nuw nsw i32 %8, 1
  br label %6
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: optsize
declare void @simPutPixel(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: optsize
declare void @simFlush(...) local_unnamed_addr #1

; Function Attrs: optsize
declare i32 @simAbs(i32 noundef) local_unnamed_addr #1

; Function Attrs: optsize
declare i32 @simMin(i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: optsize
declare i32 @simMax(i32 noundef, i32 noundef) local_unnamed_addr #1

attributes #0 = { nounwind optsize ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #1 = { optsize "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #2 = { noreturn nounwind optsize ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nounwind optsize }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 15, i32 5]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{!"Apple clang version 17.0.0 (clang-1700.0.13.5)"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
