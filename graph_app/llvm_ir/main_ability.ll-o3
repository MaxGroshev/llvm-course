; ModuleID = '../app/abilities/main_ability.c'
source_filename = "../app/abilities/main_ability.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "arm64-apple-macosx15.0.0"

; Function Attrs: nounwind ssp uwtable(sync)
define range(i32 -245, 246) i32 @getBarrierCenter() local_unnamed_addr #0 {
  %1 = tail call i32 @simRand() #5
  %2 = srem i32 %1, 246
  ret i32 %2
}

declare i32 @simRand(...) local_unnamed_addr #1

; Function Attrs: noreturn nounwind ssp uwtable(sync)
define noundef i32 @app() local_unnamed_addr #2 {
  %1 = alloca [256 x [512 x i32]], align 4
  call void @llvm.lifetime.start.p0(i64 524288, ptr nonnull %1) #5
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(524288) %1, i8 0, i64 524288, i1 false)
  %2 = tail call i32 @simRand() #5
  %3 = srem i32 %2, 246
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %4, i64 255
  store i32 16763144, ptr %5, align 4, !tbaa !6
  br label %6

6:                                                ; preds = %80, %0
  %7 = phi i32 [ %3, %0 ], [ %81, %80 ]
  %8 = phi i32 [ 0, %0 ], [ %82, %80 ]
  %9 = zext i32 %7 to i64
  br label %10

10:                                               ; preds = %6, %33
  %11 = phi i64 [ 0, %6 ], [ %34, %33 ]
  %12 = icmp eq i64 %11, %9
  %13 = freeze i1 %12
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 1
  %16 = load i32, ptr %15, align 4, !tbaa !6
  %17 = trunc nuw nsw i64 %11 to i32
  br label %20

18:                                               ; preds = %10
  %19 = trunc nuw nsw i64 %11 to i32
  br label %36

20:                                               ; preds = %14, %20
  %21 = phi i32 [ %16, %14 ], [ %28, %20 ]
  %22 = phi i64 [ 1, %14 ], [ %26, %20 ]
  %23 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 %22
  %24 = trunc i64 %22 to i32
  %25 = add i32 %24, -1
  tail call void @simPutPixel(i32 noundef %25, i32 noundef %17, i32 noundef %21) #5
  %26 = add nuw nsw i64 %22, 1
  %27 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 %26
  %28 = load i32, ptr %27, align 4, !tbaa !6
  store i32 %28, ptr %23, align 4, !tbaa !6
  %29 = icmp eq i64 %26, 511
  br i1 %29, label %33, label %20, !llvm.loop !10

30:                                               ; preds = %33
  tail call void @simFlush() #5
  %31 = and i32 %8, 127
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %50, label %80

33:                                               ; preds = %20, %47
  %34 = add nuw nsw i64 %11, 1
  %35 = icmp eq i64 %34, 256
  br i1 %35, label %30, label %10, !llvm.loop !12

36:                                               ; preds = %18, %47
  %37 = phi i64 [ 1, %18 ], [ %48, %47 ]
  %38 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 %37
  %39 = load i32, ptr %38, align 4, !tbaa !6
  %40 = trunc i64 %37 to i32
  %41 = add i32 %40, -1
  tail call void @simPutPixel(i32 noundef %41, i32 noundef %19, i32 noundef %39) #5
  %42 = icmp eq i64 %37, 447
  br i1 %42, label %47, label %43

43:                                               ; preds = %36
  %44 = add nuw nsw i64 %37, 1
  %45 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %11, i64 %44
  %46 = load i32, ptr %45, align 4, !tbaa !6
  store i32 %46, ptr %38, align 4, !tbaa !6
  br label %47

47:                                               ; preds = %36, %43
  %48 = phi i64 [ %44, %43 ], [ 448, %36 ]
  %49 = icmp eq i64 %48, 511
  br i1 %49, label %33, label %36, !llvm.loop !10

50:                                               ; preds = %30
  %51 = tail call i32 @simRand() #5
  %52 = srem i32 %51, 246
  %53 = sext i32 %52 to i64
  br label %54

54:                                               ; preds = %50, %62
  %55 = phi i64 [ 0, %50 ], [ %63, %62 ]
  %56 = trunc i64 %55 to i32
  %57 = sub i32 %52, %56
  %58 = tail call i32 @simAbs(i32 noundef %57) #5
  %59 = icmp sgt i32 %58, 35
  br i1 %59, label %60, label %62

60:                                               ; preds = %54
  %61 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %55, i64 510
  store i32 7522568, ptr %61, align 4, !tbaa !6
  br label %62

62:                                               ; preds = %54, %60
  %63 = add nuw nsw i64 %55, 1
  %64 = icmp eq i64 %63, 256
  br i1 %64, label %65, label %54, !llvm.loop !13

65:                                               ; preds = %62
  %66 = tail call i32 @simMin(i32 noundef %7, i32 noundef %52) #5
  %67 = tail call i32 @simMax(i32 noundef %7, i32 noundef %52) #5
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = sext i32 %66 to i64
  br label %73

71:                                               ; preds = %73, %65
  %72 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %53, i64 447
  store i32 16763144, ptr %72, align 4, !tbaa !6
  br label %80

73:                                               ; preds = %69, %73
  %74 = phi i64 [ %70, %69 ], [ %76, %73 ]
  %75 = getelementptr inbounds [256 x [512 x i32]], ptr %1, i64 0, i64 %74, i64 447
  store i32 16763144, ptr %75, align 4, !tbaa !6
  %76 = add nsw i64 %74, 1
  %77 = tail call i32 @simMax(i32 noundef %7, i32 noundef %52) #5
  %78 = sext i32 %77 to i64
  %79 = icmp slt i64 %76, %78
  br i1 %79, label %73, label %71, !llvm.loop !14

80:                                               ; preds = %30, %71
  %81 = phi i32 [ %52, %71 ], [ %7, %30 ]
  %82 = add nuw nsw i32 %8, 1
  br label %6
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

declare void @simPutPixel(i32 noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

declare void @simFlush(...) local_unnamed_addr #1

declare i32 @simAbs(i32 noundef) local_unnamed_addr #1

declare i32 @simMin(i32 noundef, i32 noundef) local_unnamed_addr #1

declare i32 @simMax(i32 noundef, i32 noundef) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #2 = { noreturn nounwind ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "probe-stack"="__chkstk_darwin" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+bti,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8.5a,+v8a,+zcm,+zcz" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 2, !"SDK Version", [2 x i32] [i32 15, i32 5]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{!"Apple clang version 17.0.0 (clang-1700.0.13.5)"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
